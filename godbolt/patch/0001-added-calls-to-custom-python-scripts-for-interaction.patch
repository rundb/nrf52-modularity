From 673cbba2c542d14730659d85a7581db444eaa71d Mon Sep 17 00:00:00 2001
From: Roman Turkin <roma.turkin@yahoo.com>
Date: Mon, 13 Apr 2020 21:50:49 +0200
Subject: [PATCH 1/1] added calls to custom python scripts for interaction with
 NRF52 DK

---
 etc/config/c++.defaults.properties |  4 +-
 lib/base-compiler.js               | 70 ++++++++++++++++++++++++++----
 lib/handlers/compile.js            |  1 +
 3 files changed, 65 insertions(+), 10 deletions(-)

diff --git a/etc/config/c++.defaults.properties b/etc/config/c++.defaults.properties
index 2f322de6..19b5dbce 100644
--- a/etc/config/c++.defaults.properties
+++ b/etc/config/c++.defaults.properties
@@ -20,8 +20,8 @@ compiler.g7.exe=/usr/bin/g++-7
 compiler.g7.name=g++ 7.x
 compiler.g8.exe=/usr/bin/g++-8
 compiler.g8.name=g++ 8.x
-compiler.gdefault.exe=/usr/bin/g++
-compiler.gdefault.name=g++ default
+compiler.gdefault.exe=/home/roman/programming/nrf52-modularity/nrf52/gcc/gcc-arm-none-eabi-9-2019-q4-major/bin/arm-none-eabi-g++
+compiler.gdefault.name=arm-none-eabi-g++
 
 group.clang.compilers=clang7:clangdefault
 group.clang.intelAsm=-mllvm --x86-asm-syntax=intel
diff --git a/lib/base-compiler.js b/lib/base-compiler.js
index e8838e59..1b12d0cb 100644
--- a/lib/base-compiler.js
+++ b/lib/base-compiler.js
@@ -441,6 +441,9 @@ class BaseCompiler {
         return this.getOutputFilename(dirPath, outputFilebase);
     }
 
+    getTargetBinaryFilename(dirPath, outputFilebase) {
+        return path.join(dirPath, `${outputFilebase}.bin`);
+    }
     async generateGccDump(inputFilename, options, gccDumpOptions) {
         // Maybe we should not force any RTL dump and let user hand-pick what he needs
         const addOpts = [];
@@ -499,11 +502,50 @@ class BaseCompiler {
         return this.runCompiler(compiler, options, inputFilename, execOptions);
     }
 
+    uploadDumpToEvaluationBoard(dumpName) {
+        const uploadScriptPath = "".concat(process.env.NRF52_MODULARITY_PATH).concat("/python/upload_dump/upload_dump.py")
+        const options = "-p /dev/ttyUSB0 -P ".concat(dumpName);
+        const spawn = require('child_process').spawn;
+        const python = spawn('python3', [uploadScriptPath, options])
+        python.on('close', (code) => {
+            logger.info("Upload has been complete with code " + code)
+        })        
+    }
+
+    buildExecutableForUpload(dirPath, inputFilename, outputFilename) {
+        const compilationScriptPath = "".concat(process.env.NRF52_MODULARITY_PATH).concat("/python/extract_code/extract_code.py")
+        const options = " -t arm-none-eabi- -f \"-mcpu=cortex-m4 -g3 -o0 -fPIC\" -o ".concat(outputFilename).concat(" ").concat(inputFilename).concat(" dummy")
+        const spawn = require("child_process").spawn;
+        const python = spawn('python3', [compilationScriptPath, options])
+
+        python.on('close', (code) => {
+            logger.info("extract_code finished with code " + code)
+            if (code === 0) {
+                this.uploadDumpToEvaluationBoard(outputFilename)
+            }
+            else {
+                logger.warn("Binary image for upload generation failed")
+            }
+        })
+
+        return Object.assign({}, {
+            code: 0,
+            inputFilename: inputFilename,
+            outputFilename: outputFilename,
+            executableFilename: "no-executable-file-name"
+        });
+    }
+
     async buildExecutableInFolder(key, dirPath) {
         const inputFilename = path.join(dirPath, this.compileFilename);
+        if (process.env.NRF52_MODULARITY_PATH === undefined)
+        {
+            return "Specify environmental variable NRF52_MODULARITY_PATH"   
+        }
         await fs.writeFile(inputFilename, key.source);
 
         const outputFilename = this.getExecutableFilename(dirPath, this.outputFilebase);
+        const outputBinaryFilename = this.getTargetBinaryFilename(dirPath, this.outputFilebase)
 
         const buildFilters = Object.assign({}, key.filters);
         buildFilters.binary = true;
@@ -517,8 +559,7 @@ class BaseCompiler {
         const execOptions = this.getDefaultExecOptions();
         execOptions.ldPath = this.getSharedLibraryPathsAsLdLibraryPaths(key.libraries);
 
-        const result = await this.buildExecutable(key.compiler.exe, compilerArguments, inputFilename,
-            execOptions);
+        const result = await this.buildExecutableForUpload(dirPath, inputFilename, outputBinaryFilename)
 
         result.executableFilename = outputFilename;
         result.compilationOptions = compilerArguments;
@@ -564,6 +605,19 @@ class BaseCompiler {
         return compilationResult;
     }
 
+    async buildAndUploadExecutable(key) {
+        const dirPath = await this.newTempDir();
+        const compilationResultFilename = "nrf52-compilation-result.json";
+
+        const compilationResult = await this.buildExecutableInFolder(key, dirPath);
+        logger.info("Compilation result: " + compilationResult.code)
+
+        if (compilationResult.code !== 0) {
+            return compilationResult;
+        }
+        return compilationResult;
+    }
+
     runExecutable(executable, executeParameters) {
         const maxExecOutputSize = this.env.ceProps("max-executable-output-size", 32 * 1024);
 
@@ -571,7 +625,8 @@ class BaseCompiler {
     }
 
     async handleExecution(key, executeParameters) {
-        const buildResult = await this.getOrBuildExecutable(key);
+        const buildResult = await this.buildAndUploadExecutable(key);
+        logger.info("NRF52: buildAndUploadExecutable finished with code " + buildResult.code);
         if (buildResult.code !== 0) {
             return {
                 code: 0,
@@ -581,11 +636,7 @@ class BaseCompiler {
                 stdout: []
             };
         }
-        executeParameters.ldPath = this.getSharedLibraryPathsAsLdLibraryPaths(key.libraries);
-        const result = await this.runExecutable(buildResult.executableFilename, executeParameters);
-        result.didExecute = true;
-        result.buildResult = buildResult;
-        return result;
+        return buildResult;
     }
 
     getCacheKey(source, options, backendOptions, filters, tools, libraries) {
@@ -653,6 +704,7 @@ class BaseCompiler {
                 outputFilename
             })))
         ]);
+
         asmResult.dirPath = dirPath;
         asmResult.compilationOptions = options;
         // Here before the check to ensure dump reports even on failure cases
@@ -667,6 +719,8 @@ class BaseCompiler {
             return [asmResult];
         }
 
+        logger.info(asmResult.asm)
+
         if (this.compiler.supportsOptOutput && this.optOutputRequested(options)) {
             const optPath = path.join(dirPath, `${this.outputFilebase}.opt.yaml`);
             if (await fs.pathExists(optPath)) {
diff --git a/lib/handlers/compile.js b/lib/handlers/compile.js
index ec715400..a776a9fc 100644
--- a/lib/handlers/compile.js
+++ b/lib/handlers/compile.js
@@ -282,6 +282,7 @@ class CompileHandler {
 
     handle(req, res, next) {
         const compiler = this.compilerFor(req);
+
         if (!compiler) {
             return next();
         }
-- 
2.20.1

